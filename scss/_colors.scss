/*
* $base: the color from which alpha, hue and saturation will be taken
* $n: the amount of lightness variations will be
* $mode: 
* - "dark":  considers lightness from   0% to  50%
* - "full":  considers lightness from   0% to 100%
* - "light": considers lightness from 100% to  50%
*/
@function getPalette($base, $n: 8, $mode: "full") {
  @if (null == index(("dark", "full", "light"), $mode)) {
    @error "($mode: #{$mode}) isn't valid";
  }
  $alp: alpha($base);
  $hue: hue($base);
  $sat: saturation($base);
  $a: if($mode == "light", 100%, 0%);
  $b: if($mode == "full", 100%, 50%);
  $step: getStep($n, $a, $b);
  $palette: ();
  @for $i from 1 through $n {
    $light: ($i - 0.5) * $step + $a;
    $color: hsla($hue, $sat, $light, $alp);
    $palette: append($palette, $color);
  }
  @return $palette;
}

$dark: (
  #080808,
  #181818,
  #282828,
  #383838,
  #484848,
  #585858,
  #686868,
  #787878,
);
$light: (
  #f8f8f8,
  #e8e8e8,
  #d8d8d8,
  #c8c8c8,
  #b8b8b8,
  #a8a8a8,
  #989898,
  #888888,
);
$primary: (
  #4d1900,
  #802a00,
  #b33b00,
  #e64C00,
  #ff661a,
  #ff884d,
  #ffaa80,
  #ffccb3,
);

$brights: 8;
$colors: (
  dark: $dark,
  light: $light,
  primary: $primary,
);

.bg-no {
  background: none;
}

@each $color-k, $color in $colors {
  @for $i from 1 through $brights {
    $val: nth($color, $i);
    @include hov(bg-#{$color-k}#{$i}) {
      background-color: $val;
    }
    @include hov(bdr-#{$color-k}#{$i}) {
      border-color: $val;
    }
    @include hov(#{$color-k}#{$i}) {
      color: $val;
    }
  }
}
