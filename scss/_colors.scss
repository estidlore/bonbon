/*
* $base: the color from which alpha, hue and saturation will be taken
* $n: the amount of lightness variations will be
* $mode: 
* - "dark":  considers lightness from   0% to  50%
* - "full":  considers lightness from   0% to 100%
* - "light": considers lightness from 100% to  50%
*/
@function getPalette($base, $n: 8, $mode: "full") {
  @if (null == index(("dark", "full", "light"), $mode)) {
    @error "($mode: #{$mode}) isn't valid";
  }
  $alp: alpha($base);
  $hue: hue($base);
  $sat: saturation($base);
  $a: if($mode == "light", 100%, 0%);
  $b: if($mode == "full", 100%, 50%);
  $step: getStep($n, $a, $b);
  $palette: ();
  @for $i from 1 through $n {
    $light: ($i - 0.5) * $step + $a;
    $color: hsla($hue, $sat, $light, $alp);
    $palette: append($palette, $color);
  }
  @return $palette;
}

$dark: (base: #000, mode: "dark", n: 8) !default;
$light: (base: #fff, mode: "light", n: 8) !default;
$primary: (base: #f2590d, mode: "full", n: 8) !default;
$secondary: (base: #dfc020, mode: "full", n: 8) !default;

$colors: (
  dark: $dark,
  light: $light,
  primary: $primary,
  secondary: $secondary,
) !default;

.bg-no {
  background: none;
}

@each $color-k, $color in $colors {
  $color: getPalette(
    map-get($color, "base"),
    map-get($color, "n"),
    map-get($color, "mode"),
  );
  @for $i from 1 through length($color) {
    $val: nth($color, $i);
    @include hov(bg-#{$color-k}#{$i}) {
      background-color: $val;
    }
    @include hov(bdr-#{$color-k}#{$i}) {
      border-color: $val;
    }
    @include hov(#{$color-k}#{$i}) {
      color: $val;
    }
  }
}
